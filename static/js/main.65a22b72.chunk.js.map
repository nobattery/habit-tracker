{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","this","name","count","className","onClick","Component","HabitAddForm","formRef","React","createRef","inputRef","onSubmit","event","preventDefault","current","value","onAdd","reset","ref","type","placeholder","PureComponent","Habits","handleAdd","habits","map","id","onReset","Navbar","totalCount","App","state","item","setState","filter","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65a22b72.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n{/* \r\n    Habit 이라는 습관 컴포넌트는 자체적으로 가지고 있는 state는 없고,\r\n    외부에서 props로 전달받은 데이터를 보여주기만 하는 컴포넌트이다.\r\n    따라서, 클릭시 발생하게 되면 내부적으로 데이터를 처리하기 보다는\r\n    주어진 콜백함수들을 단순히 호출만해주는 컴포넌트로 구현한다.\r\n\r\n    ==> 심플하고 단순한 컴포넌트로 구현하기 위함\r\n*/}\r\n\r\n{/*Props로 전달받은 habit인자로 콜백함수 호출 */}\r\nclass Habit extends Component {\r\n    handleIncrement = () => {\r\n        this.props.onIncrement(this.props.habit)\r\n    };\r\n\r\n    handleDecrement = () => {\r\n        this.props.onDecrement(this.props.habit)\r\n    };\r\n\r\n    handleDelete = () => {\r\n        this.props.onDelete(this.props.habit)\r\n    };\r\n\r\n    render() {\r\n        const { name, count } = this.props.habit;\r\n        return (\r\n            <li className=\"habit\">\r\n                {/*Props로 Habits에서 데이터를 받아와 표기하도록 함 */}\r\n                <span className=\"habit-name\">{name}</span> \r\n                <span className=\"habit-count\">{count}</span>\r\n                {/*fortawesome의 plus 이미지 가져오기*/}\r\n                <button \r\n                    className=\"habit-button habit-increase\" \r\n                    onClick={this.handleIncrement}\r\n                >\r\n                    <i className=\"fas fa-plus-square\"></i>\r\n                </button>\r\n                {/*fortawesome의 minus 이미지 가져오기*/}\r\n                <button \r\n                    className=\"habit-button habit-decrease\" \r\n                    onClick={this.handleDecrement}\r\n                >\r\n                    <i className=\"fas fa-minus-square\"></i>\r\n                </button>\r\n                {/*fortawesome의 trash 이미지 가져오기*/}\r\n                <button \r\n                    className=\"habit-button habit-delete\"\r\n                    onClick={this.handleDelete}\r\n                >\r\n                    <i className=\"fas fa-trash\"></i>\r\n                </button>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Habit;","import React, { PureComponent } from \"react\";\r\nimport reactDom from \"react-dom\";\r\n\r\n{\r\n  /*Ref를 이용하여 form에 임의의 name 입력시 새로운 habit생성 */\r\n}\r\n{\r\n  /*PureComponent : 최상위 데이터가 변하지 않으면 re-rendering을 하지 않는다. \r\n    AddForm의 경우 rerender필요가 없기 때문에 pureComponent로 변경*/\r\n}\r\nclass HabitAddForm extends PureComponent {\r\n  formRef = React.createRef();\r\n  inputRef = React.createRef();\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault(); //자동 새로고침 방지\r\n    const name = this.inputRef.current.value;\r\n    name && this.props.onAdd(name);\r\n    //this.inputRef.current.value = '';\r\n    this.formRef.current.reset();\r\n  };\r\n  render() {\r\n    return (\r\n      <form ref={this.formRef} className=\"add-form\" onSubmit={this.onSubmit}>\r\n        <input\r\n          ref={this.inputRef}\r\n          type=\"text\"\r\n          className=\"add-input\"\r\n          placeholder=\"Habit\"\r\n        />\r\n        <button className=\"add-button\">Add</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HabitAddForm;\r\n","import React, { Component } from \"react\";\r\nimport Habit from \"./habit\";\r\nimport HabitAddForm from \"./habitAddForm\";\r\n\r\n{\r\n  /*App -> Habits -> Habit 컴포넌트로 데이터를 전달하도록 한다.*/\r\n}\r\nclass Habits extends Component {\r\n  handleIncrement = (habit) => {\r\n    {\r\n      /* app.jsx->render->onIncrement*/\r\n    }\r\n    this.props.onIncrement(habit);\r\n  };\r\n\r\n  handleDecrement = (habit) => {\r\n    this.props.onDecrement(habit);\r\n  };\r\n\r\n  handleDelete = (habit) => {\r\n    this.props.onDelete(habit);\r\n  };\r\n\r\n  handleAdd = (name) => {\r\n    this.props.onAdd(name);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"habits\">\r\n          <HabitAddForm onAdd={this.handleAdd} />\r\n          <ul>\r\n            {this.props.habits.map((habit) => (\r\n              <Habit\r\n                key={habit.id}\r\n                habit={habit}\r\n                onIncrement={this.props.onIncrement}\r\n                onDecrement={this.props.onDecrement}\r\n                onDelete={this.props.onDelete}\r\n              />\r\n            ))}\r\n          </ul>\r\n          <button className=\"habits-reset\" onClick={this.props.onReset}>\r\n            Reset All\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habits;\r\n","import React, { PureComponent } from \"react\";\r\n\r\n{\r\n  /*Navbar : 로고이미지, 제목, totalCount(app->navbar) 보여줌 */\r\n}\r\nclass Navbar extends PureComponent {\r\n  render() {\r\n    return (\r\n      <div className=\"navbar\">\r\n        <i className=\"navbar-logo fas fa-crow\"></i>\r\n        <span>Habit Tracker</span>\r\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\n\n{\n  /*navBar에서도 상태 변경을 위해서 가장 상위 컴포넌트에서 state 선언 */\n}\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Running\", count: 0 },\n      { id: 3, name: \"Coding\", count: 0 },\n    ],\n  };\n\n  handleIncrement = (habit) => {\n    {\n      /*Spread Operator : habits배열 안의 아이템들을 새로운 배열로 복사 */\n    }\n    /* 단순 count plus 코드. id 구별까지 추가해주기 위해 주석처리\n    const habits = [...this.state.habits];\n    const index = habits.indexOf(habit);\n    habits[index].count++;\n    */\n    //id 비교 하는 이유 : 해당하는 컴포넌트만 업데이트 시키기 위함.\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        //item의 id와 habit의 id가 같을 경우\n        return { ...habit, count: habit.count + 1 }; //habit의 값을 모두 가져오되, count는 기존 count + 1\n      }\n      return item; //id가 다를경우 기존 item return\n    });\n\n    {\n      /*새로운 배열을 생성했기 때문에 setState에는 새로운 state오브젝트를 만들어야 한다. */\n    }\n    this.setState({ habits });\n  };\n\n  handleDecrement = (habit) => {\n    /*단순 count minus 코드. id 구별까지 추가해주기 위해 주석처리\n    const habits = [...this.state.habits];\n    const index = habits.indexOf(habit);\n    const count = habits[index].count - 1;\n    habits[index].count = count < 0 ? 0 : count;\n    */\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        //item의 id와 habit의 id가 같을 경우\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count }; //hatbit의 값을 모두 가져오되, count는 기존 count - 1\n      }\n      return item;\n    });\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    {\n      /*특정한 곳을 제외하고 or 포함해서 만들 수 있는 배열의 API filter를 이용하여\n    전달받은 habit을 배열에 삭제하도록 함.\n    this.state.habits에서 아이템을 전달받아 함수인자로 받은 habit의 id가\n    동일하지 않은 경우 삭제 함*/\n    }\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = (name) => {\n    {\n      /*habits배열을 복사해오고, id 는 중복 방지를 위해서 Date.now() 이용*/\n    }\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    {\n      /*ResetBtn onClick -> 각 habit들의 count가 0으로 리셋*/\n    }\n    const habits = this.state.habits.map((habit) => {\n      if (habit.count !== 0) {\n        //habit의 count가 0이 아닐때만 habit의 count를 0으로 만들어 업데이트해주고\n        return { ...habit, count: 0 };\n      }\n      return habit; //그 외에는 기존의 habit을 return\n    });\n    this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <>\n        {/*Navbar : 활성화된 habit의 개수를 보여줌*/}\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\n{\n  /* yarn add @fortawesome/fontawesome-free */\n}\n\n{\n  /*StrictMode 이용시 개발 중 에러 메세지가 바로 표시된다.*/\n}\n{\n  /*simpleHabit 로 변경시 ReactHook예제로 연결된다.*/\n}\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}